name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          backend:
            - 'modulith/**'
          frontend:
            - 'frontend-next/**'

  backend-ci:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: |
        cd modulith
        ./mvnw clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Build application
      run: |
        cd modulith
        ./mvnw clean package -DskipTests

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: |
          modulith/target/*.jar
          modulith/target/surefire-reports/

  frontend-ci:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-next/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend-next
        npm ci

    - name: Run linter
      run: |
        cd frontend-next
        npm run lint

    - name: Build application
      run: |
        cd frontend-next
        npm run build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: frontend-next/.next/

  deploy-staging:
    needs: [backend-ci, frontend-ci]
    if: |
      always() && 
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') &&
      (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') &&
      github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Ajoutez ici vos commandes de déploiement staging

  deploy-production:
    needs: [backend-ci, frontend-ci]
    if: |
      always() && 
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') &&
      (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Ajoutez ici vos commandes de déploiement production
